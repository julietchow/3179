rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = 'count_of_TV Show')
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(movie = replace(movie, is.na(movie), 0),
tv_show = replace(tv_show, is.na(tv_show), 0))
result_df <- result_df %>%
group_by(country, year) %>%
mutate(total_count = sum(movie, tv_show))
# Convert tibble to a data frame
result_df <- as.data.frame(result_df)
# Save the data frame as a CSV file
write.csv(result_df, file = "choropleth_map_file.csv", row.names = FALSE)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
print(result_df)
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
library(tidyr)
library(dplyr)
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
library(dplyr)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
print(result_df)
# Rename the columns
result_df <- result_df %>%
rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = 'count_of_TV Show')
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(movie = replace(movie, is.na(movie), 0),
tv_show = replace(tv_show, is.na(tv_show), 0))
result_df <- result_df %>%
group_by(country, year) %>%
mutate(total_count = sum(movie, tv_show))
# Convert tibble to a data frame
result_df <- as.data.frame(result_df)
# Save the data frame as a CSV file
write.csv(result_df, file = "choropleth_map_file.csv", row.names = FALSE)
df <- read.csv("netflix1.csv")
#Coal
coal <- read.csv("Consumption_Coal.csv", strip.white = TRUE)
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(coal) <- new_column_names
# Assuming your data frame is named coal, you can subset it to get columns from X2000 to X2021:
coal <- coal[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
coal <- coal %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_coal <- coal %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "coal_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_coal <- reshaped_coal %>%
select(-Continent)
# Load the tidyverse package if it's not already loaded
# install.packages("tidyverse") and ("dplyr")  # Uncomment and run if not installed
library(tidyverse)
library(dplyr)
#Coal
coal <- read.csv("Consumption_Coal.csv", strip.white = TRUE)
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(coal) <- new_column_names
# Assuming your data frame is named coal, you can subset it to get columns from X2000 to X2021:
coal <- coal[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
coal <- coal %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_coal <- coal %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "coal_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_coal <- reshaped_coal %>%
select(-Continent)
# Clean up the "Country" column to remove leading spaces
reshaped_coal$Country <- str_trim(reshaped_coal$Country, side = "both")
reshaped_coal <- as.data.frame(reshaped_coal)
#Natural Gas
ng <- read.csv("Consumption_NaturalGas.csv")
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(ng) <- new_column_names
# Assuming your data frame is named ng, you can subset it to get columns from X2000 to X2021:
ng <- ng[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
ng <- ng %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_ng <- ng %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "ng_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_ng <- reshaped_ng %>%
select(-Continent)
reshaped_ng <- as.data.frame(reshaped_ng)
reshaped_ng
# Merge the last column of reshaped_ng into reshaped_coal based on "Country" and "Year"
final_table <- merge(reshaped_coal, reshaped_ng[, c("Country", "Year", "ng_consumption")], by = c("Country", "Year"), all.x = TRUE)
# If you want to fill missing values with 0 in the ng_consumption column, you can use the following line:
final_table$ng_consumption[is.na(final_table$ng_consumption)] <- 0
# View the resulting data frame
final_table
#Neuclear+renewables
nr <- read.csv("Consumption_Neuclear+renewables.csv")
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(nr) <- new_column_names
# Assuming your data frame is named ng, you can subset it to get columns from X2000 to X2021:
nr <- nr[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
nr <- nr %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_nr <- nr %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "nr_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_nr <- reshaped_nr %>%
select(-Continent)
reshaped_nr <- as.data.frame(reshaped_nr)
# Merge the last column of reshaped_nr into final_table based on "Country" and "Year"
final_table <- merge(final_table, reshaped_nr[, c("Country", "Year", "nr_consumption")], by = c("Country", "Year"), all.x = TRUE)
# If you want to fill missing values with 0 in the nr_consumption column, you can use the following line:
final_table$nr_consumption[is.na(final_table$nr_consumption)] <- 0
#Petroleum
p <- read.csv("Consumption_Petroleum.csv")
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(p) <- new_column_names
# Assuming your data frame is named ng, you can subset it to get columns from X2000 to X2021:
p <- p[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
p <- p %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_p <- p %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "p_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_p <- reshaped_p %>%
select(-Continent)
reshaped_p <- as.data.frame(reshaped_p)
# Merge the last column of reshaped_p into final_table based on "Country" and "Year"
final_table <- merge(final_table, reshaped_p[, c("Country", "Year", "p_consumption")], by = c("Country", "Year"), all.x = TRUE)
# If you want to fill missing values with 0 in the ng_consumption column, you can use the following line:
final_table$p_consumption[is.na(final_table$p_consumption)] <- 0
final_table <- final_table %>%
mutate(
coal_consumption = ifelse(trimws(coal_consumption) == "NA", 0, as.numeric(coal_consumption)),
ng_consumption = ifelse(trimws(ng_consumption) == "NA", 0, as.numeric(ng_consumption)),
nr_consumption = ifelse(trimws(nr_consumption) == "NA", 0, as.numeric(nr_consumption)),
p_consumption = ifelse(trimws(p_consumption) == "NA", 0, as.numeric(p_consumption))
)
final_table$total_consumption <- rowSums(final_table[, c("coal_consumption", "ng_consumption", "nr_consumption", "p_consumption")])
map <- read.csv("choropleth_map.csv")
# Read the CSV file
map <- read.csv("choropleth_map.csv")
# Find the maximum value in the "total_consumption" column
max(map$total_consumption)
# Find the maximum value in the "total_consumption" column
min(map$total_consumption)
map
# Read the CSV file into a dataframe
data <- read.csv("choropleth_map.csv")
# Sort the dataframe by country and year
data <- data[order(data$country, data$Year), ]
data
# Calculate the percentage changes in consumption for each year
data$coal_pct_change <- c(NA, diff(data$coal_consumption) / lag(data$coal_consumption) * 100)
data$ng_pct_change <- c(NA, diff(data$ng_consumption) / lag(data$ng_consumption) * 100)
data$nr_pct_change <- c(NA, diff(data$nr_consumption) / lag(data$nr_consumption) * 100)
data$p_pct_change <- c(NA, diff(data$p_consumption) / lag(data$p_consumption) * 100)
data$total_pct_change <- c(NA, diff(data$total_consumption) / lag(data$total_consumption) * 100)
# Read the CSV file into a dataframe
data <- read.csv("choropleth_map.csv")
# Sort the dataframe by country and year
data <- data[order(data$country, data$Year), ]
# Create a function to calculate percentage changes within each country
calculate_pct_change <- function(x) {
return(c(NA, diff(x) / lag(x) * 100))
}
# Calculate percentage changes for each consumption type within each country
data$coal_pct_change <- unlist(tapply(data$coal_consumption, data$country, calculate_pct_change))
data$ng_pct_change <- unlist(tapply(data$ng_consumption, data$country, calculate_pct_change))
data$nr_pct_change <- unlist(tapply(data$nr_consumption, data$country, calculate_pct_change))
data$p_pct_change <- unlist(tapply(data$p_consumption, data$country, calculate_pct_change))
data$total_pct_change <- unlist(tapply(data$total_consumption, data$country, calculate_pct_change))
# Create a new dataframe with the percentage changes
percentage_changes <- data[, c("country", "Year", "coal_pct_change", "ng_pct_change", "nr_pct_change", "p_pct_change", "total_pct_change")]
# Read the CSV file into a dataframe
data <- read.csv("choropleth_map.csv")
data <- data[order(data$country, data$Year), ]
# Create a function to calculate percentage changes per year within each country
calculate_pct_change <- function(x) {
return(c(NA, diff(x) / lag(x) * 100))
}
# Calculate percentage changes for each consumption type per year within each country
data$coal_pct_change <- unlist(tapply(data$coal_consumption, data$country, calculate_pct_change))
# Read the CSV file into a dataframe
data <- read.csv("choropleth_map.csv")
data
# Sort the dataframe by country and year
data <- data[order(data$country, data$Year), ]
# Create a function to calculate percentage difference per year within each country
calculate_pct_difference <- function(x) {
return(c(NA, diff(x) / lag(x) * 100))
}
# Calculate percentage difference for each energy type per year within each country
data$coal_pct_diff <- unlist(tapply(data$coal_consumption, data$country, calculate_pct_difference))
# Read the CSV file into a dataframe
data <- read.csv("choropleth_map.csv")
# Create a function to calculate percentage difference
calculate_pct_difference <- function(x) {
return(c(NA, diff(x) / lag(x) * 100))
}
# Initialize an empty list to store the results
percentage_diff_list <- list()
# Loop through unique countries
for (country in unique(data$country)) {
subset_data <- data[data$country == country, ]
subset_data$coal_pct_diff <- calculate_pct_difference(subset_data$coal_consumption)
subset_data$ng_pct_diff <- calculate_pct_difference(subset_data$ng_consumption)
subset_data$nr_pct_diff <- calculate_pct_difference(subset_data$nr_consumption)
subset_data$p_pct_diff <- calculate_pct_difference(subset_data$p_consumption)
subset_data$total_pct_diff <- calculate_pct_difference(subset_data$total_consumption)
percentage_diff_list[[country]] <- subset_data
}
# Read the CSV file into a dataframe
data <- read.csv("choropleth_map.csv")
# Create a function to calculate percentage difference
calculate_pct_difference <- function(x) {
return(c(NA, diff(x) / lag(x) * 100))
}
# Initialize an empty list to store the results
percentage_diff_list <- list()
# Loop through unique countries
for (country in unique(data$country)) {
subset_data <- data[data$country == country, ]
# Calculate percentage differences for each energy type
subset_data$coal_pct_diff <- calculate_pct_difference(subset_data$coal_consumption)
subset_data$ng_pct_diff <- calculate_pct_difference(subset_data$ng_consumption)
subset_data$nr_pct_diff <- calculate_pct_difference(subset_data$nr_consumption)
subset_data$p_pct_diff <- calculate_pct_difference(subset_data$p_consumption)
subset_data$total_pct_diff <- calculate_pct_difference(subset_data$total_consumption)
# Add the subsetted data to the list
percentage_diff_list[[country]] <- subset_data
}
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 1.05505585262e12
# Convert energy consumption from quads to MWh
data$energy_in_MWh <- data$total_consumption * conversion_factor
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 293071070000000
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 2.9307107
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 293.07107
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
data
max(data$energy_in_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 2930.7107
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
max(data$energy_in_kWh)
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 293071.07
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
max(data$energy_in_kWh)
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 29307.107
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
max(data$energy_in_kWh)
data
max(data$energy_in_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 29.307107
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
max(data$energy_in_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 2930.7107
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
max(data$energy_in_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factor
conversion_factor <- 293.07107
# Convert energy consumption from quads to MWh
data$energy_in_kWh <- data$total_consumption * conversion_factor
max(data$energy_in_kWh)
data
min(data$energy_in_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
trillion_to_billion <- 1 / 1000
quad_to_kWh <- 293071070000000
# Convert energy consumption from quads to billion kWh
data$energy_in_billion_kWh <- (data$total_consumption / trillion_to_billion) / quad_to_kWh
min(data$energy_in_kWh)
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293071070000000
# Convert energy consumption from quads to million kWh
data$energy_in_million_kWh <- data$total_consumption / quad_to_kWh / 1e6
min(data$energy_in_million_kWh)
max(data$energy_in_million_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 0.0002930711
# Convert energy consumption from quads to million kWh
data$energy_in_million_kWh <- data$total_consumption / quad_to_kWh
max(data$energy_in_million_kWh)
min(data$energy_in_million_kWh)
data
max(data$energy_in_million_kWh)
data
max(data$energy_in_million_kWh)
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 0.002930711
# Convert energy consumption from quads to million kWh
data$energy_in_million_kWh <- data$total_consumption / quad_to_kWh
max(data$energy_in_million_kWh)
min(data$energy_in_million_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 0.002930711
# Convert energy consumption from quads to million kWh
data$energy_in_million_kWh <- data$total_consumption / quad_to_kWh
min(data$energy_in_million_kWh)
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 0.002930711 # 10^(14)
# Convert energy consumption from quads to million kWh
data$energy_in_million_kWh <- data$total_consumption * quad_to_kWh
min(data$energy_in_million_kWh)
max(data$energy_in_million_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 0.0002930711 # 10^(14)
# Convert energy consumption from quads to million kWh
data$energy_in_million_kWh <- data$total_consumption * quad_to_kWh
max(data$energy_in_million_kWh)
data
max(data$energy_in_million_kWh)
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293.0711 # 10^(14)
# Convert energy consumption from quads to million kWh
data$energy_in_million_kWh <- data$total_consumption * quad_to_kWh
max(data$energy_in_million_kWh)
min(data$energy_in_million_kWh)
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293.0711
# Convert energy consumption from quads to million kWh
data <- data * quad_to_kWh
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293.0711
# Convert energy consumption from quads to million kWh
data <- data * quad_to_kWh
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293.0711
# Convert multiple columns to kWh
data <- data %>%
mutate(
coal_consumption_kWh = coal_consumption * quad_to_kWh,
nr_consumption_kWh = nr_consumption * quad_to_kWh,
ng_consumption_kWh = ng_consumption * quad_to_kWh,
p_consumption_kWh = p_consumption * quad_to_kWh,
total_consumption_kWh = total_consumption * quad_to_kWh
)
library(tidyverse)
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293.0711
# Convert multiple columns to kWh
data <- data %>%
mutate(
coal_consumption_kWh = coal_consumption * quad_to_kWh,
nr_consumption_kWh = nr_consumption * quad_to_kWh,
ng_consumption_kWh = ng_consumption * quad_to_kWh,
p_consumption_kWh = p_consumption * quad_to_kWh,
total_consumption_kWh = total_consumption * quad_to_kWh
)
data
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293.0711
# Convert multiple columns to kWh
data <- data %>%
mutate(
coal_consumption = coal_consumption * quad_to_kWh,
nr_consumption = nr_consumption * quad_to_kWh,
ng_consumption = ng_consumption * quad_to_kWh,
p_consumption = p_consumption * quad_to_kWh,
total_consumption = total_consumption * quad_to_kWh
)
data
max(data$total_consumption)
min(data$total_consumption)
data <- read.csv("choropleth_map.csv")
# Define the conversion factors
# Define the conversion factor
quad_to_kWh <- 293.0711
# Convert multiple columns to kWh
data <- data %>%
mutate(
coal_consumption = coal_consumption * quad_to_kWh,
nr_consumption = nr_consumption * quad_to_kWh,
ng_consumption = ng_consumption * quad_to_kWh,
p_consumption = p_consumption * quad_to_kWh,
total_consumption = total_consumption * quad_to_kWh
)
# Define the file name
output_file <- "choropleth_map_new.csv"
# Save the dataframe as a CSV file
write.csv(data, file = output_file, row.names = FALSE)
