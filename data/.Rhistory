df <- read.csv("netflix1.csv")
df
df[country]
df["country"]
df["country"].unique()
df["country"].unique
unique(df["country"])
df <- read.csv("netflix1.csv")
unique(df["country"])
df
df["date_added"]
type(df["date_added"])
df["date_added"].type()
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Load the lubridate library for date manipulation
library(lubridate)
install.packages("lubridate")
# Load the lubridate library for date manipulation
library(lubridate)
load('lubridate')
load.library('lubridate')
df$year_added <- year(df$date_added)
df
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
library(dplyr)
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
print(result_df)
result_df
print(n = result_df)
# Create separate columns for movies and TV shows
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Load the tidyr library
library(tidyr)
# Create separate columns for movies and TV shows
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Print the modified result DataFrame
print(result_df)
# Convert tibble to a data frame
result_df <- as.data.frame(result_df)
# Save the data frame as a CSV file
write.csv(result_df, file = "choropleth_map_file.csv", row.names = FALSE)
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
df <- read.csv("netflix1.csv")
df["date_added"]
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Create separate columns for movies and TV shows
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows)
result_df <- result_df %>%
group_by(country, year_added) %>%
mutate(total_count = sum(count_of_Movie, count_of_TV_Show))
# Convert tibble to a data frame
result_df <- as.data.frame(result_df)
# Save the data frame as a CSV file
write.csv(result_df, file = "choropleth_map_file.csv", row.names = FALSE)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Create separate columns for movies and TV shows
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows)
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Create separate columns for movies and TV shows
result_df <- df %>%
pivot_wider(names_from = type, values_from = count_of_shows)
result_df <- result_df %>%
group_by(country, year_added) %>%
mutate(total_count = sum(count_of_Movie, count_of_TV_Show))
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
result_df <- result_df %>%
group_by(country, year_added) %>%
mutate(total_count = sum(count_of_Movie, count_of_TV_Show))
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
print(result_df)
result_df <- result_df %>%
group_by(country, year_added) %>%
mutate(total_count = sum(count_of_Movie, count_of_TV_Show))
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(count_of_Movie = replace(count_of_Movie, is.na(count_of_Movie), 0),
count_of_TV_Show = replace(count_of_TV_Show, is.na(count_of_TV_Show), 0))
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(count_of_Movie = replace(count_of_Movie, is.na(count_of_Movie), 0),
count_of_TV_Show = replace(count_of_TV_Show, is.na(count_of_TV Show), 0))
print(result_df)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(count_of_Movie = replace(count_of_Movie, is.na(count_of_Movie), 0),
count_of_TV_Show = replace(count_of_TV_Show, is.na(count_of_TV Show), 0))
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(count_of_Movie = replace(count_of_Movie, is.na(count_of_Movie), 0),
count_of_TV_Show = replace(count_of_TV Show, is.na(count_of_TV Show), 0))
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(count_of_Movie = replace(count_of_Movie, is.na(count_of_Movie), 0),
count_of_TV Show = replace(count_of_TV Show, is.na(count_of_TV Show), 0))
# Rename the columns
result_df <- result_df %>%
rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = count_of_TV_Show)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Rename the columns
result_df <- result_df %>%
rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = count_of_TV_Show)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
# Rename the columns
result_df <- result_df %>%
rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = count_of_TV Show)
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(count_of_Movie = replace(count_of_Movie, is.na(count_of_Movie), 0),
count_of_TV Show = replace(count_of_TV Show, is.na(count_of_TV Show), 0))
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
print(result_df)
# Rename the columns
result_df <- result_df %>%
rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = 'count_of_TV Show')
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(movie = replace(movie, is.na(movie), 0),
tv_show = replace(tv_show, is.na(tv_show), 0))
print(result_df)
result_df <- result_df %>%
group_by(country, year_added) %>%
mutate(total_count = sum(movie, tv_show))
result_df <- result_df %>%
group_by(country, year) %>%
mutate(total_count = sum(movie, tv_show))
print(result_df)
# Convert tibble to a data frame
result_df <- as.data.frame(result_df)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
print(result_df)
# Rename the columns
result_df <- result_df %>%
rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = 'count_of_TV Show')
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(movie = replace(movie, is.na(movie), 0),
tv_show = replace(tv_show, is.na(tv_show), 0))
result_df <- result_df %>%
group_by(country, year) %>%
mutate(total_count = sum(movie, tv_show))
# Convert tibble to a data frame
result_df <- as.data.frame(result_df)
# Save the data frame as a CSV file
write.csv(result_df, file = "choropleth_map_file.csv", row.names = FALSE)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
print(result_df)
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
library(tidyr)
library(dplyr)
# Load the lubridate library for date manipulation
library(lubridate)
library(tidyr)
library(dplyr)
df <- read.csv("netflix1.csv")
# Convert "date_added" to a Date object and extract the year
df$date_added <- as.Date(df$date_added, format = "%m/%d/%Y")
df$year_added <- year(df$date_added)
# Group the data by "type," "country," and "year_added" and calculate the count
result_df <- df %>%
group_by(type, country, year_added) %>%
summarize(count_of_shows = n())
result_df <- result_df %>%
pivot_wider(names_from = type, values_from = count_of_shows, names_prefix = "count_of_")
print(result_df)
# Rename the columns
result_df <- result_df %>%
rename(country = country,
year = year_added,
movie = count_of_Movie,
tv_show = 'count_of_TV Show')
# Replace NA values with 0 in both columns
result_df <- result_df %>%
mutate(movie = replace(movie, is.na(movie), 0),
tv_show = replace(tv_show, is.na(tv_show), 0))
result_df <- result_df %>%
group_by(country, year) %>%
mutate(total_count = sum(movie, tv_show))
# Convert tibble to a data frame
result_df <- as.data.frame(result_df)
# Save the data frame as a CSV file
write.csv(result_df, file = "choropleth_map_file.csv", row.names = FALSE)
df <- read.csv("netflix1.csv")
#Coal
coal <- read.csv("Consumption_Coal.csv", strip.white = TRUE)
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(coal) <- new_column_names
# Assuming your data frame is named coal, you can subset it to get columns from X2000 to X2021:
coal <- coal[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
coal <- coal %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_coal <- coal %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "coal_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_coal <- reshaped_coal %>%
select(-Continent)
# Load the tidyverse package if it's not already loaded
# install.packages("tidyverse") and ("dplyr")  # Uncomment and run if not installed
library(tidyverse)
library(dplyr)
#Coal
coal <- read.csv("Consumption_Coal.csv", strip.white = TRUE)
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(coal) <- new_column_names
# Assuming your data frame is named coal, you can subset it to get columns from X2000 to X2021:
coal <- coal[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
coal <- coal %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_coal <- coal %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "coal_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_coal <- reshaped_coal %>%
select(-Continent)
# Clean up the "Country" column to remove leading spaces
reshaped_coal$Country <- str_trim(reshaped_coal$Country, side = "both")
reshaped_coal <- as.data.frame(reshaped_coal)
#Natural Gas
ng <- read.csv("Consumption_NaturalGas.csv")
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(ng) <- new_column_names
# Assuming your data frame is named ng, you can subset it to get columns from X2000 to X2021:
ng <- ng[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
ng <- ng %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_ng <- ng %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "ng_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_ng <- reshaped_ng %>%
select(-Continent)
reshaped_ng <- as.data.frame(reshaped_ng)
reshaped_ng
# Merge the last column of reshaped_ng into reshaped_coal based on "Country" and "Year"
final_table <- merge(reshaped_coal, reshaped_ng[, c("Country", "Year", "ng_consumption")], by = c("Country", "Year"), all.x = TRUE)
# If you want to fill missing values with 0 in the ng_consumption column, you can use the following line:
final_table$ng_consumption[is.na(final_table$ng_consumption)] <- 0
# View the resulting data frame
final_table
#Neuclear+renewables
nr <- read.csv("Consumption_Neuclear+renewables.csv")
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(nr) <- new_column_names
# Assuming your data frame is named ng, you can subset it to get columns from X2000 to X2021:
nr <- nr[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
nr <- nr %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_nr <- nr %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "nr_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_nr <- reshaped_nr %>%
select(-Continent)
reshaped_nr <- as.data.frame(reshaped_nr)
# Merge the last column of reshaped_nr into final_table based on "Country" and "Year"
final_table <- merge(final_table, reshaped_nr[, c("Country", "Year", "nr_consumption")], by = c("Country", "Year"), all.x = TRUE)
# If you want to fill missing values with 0 in the nr_consumption column, you can use the following line:
final_table$nr_consumption[is.na(final_table$nr_consumption)] <- 0
#Petroleum
p <- read.csv("Consumption_Petroleum.csv")
# Generate the new column names from 1980 to 2021
new_column_names <- c("Continent", "Country", as.character(1980:2021))
# Assign the new column names to your data frame
colnames(p) <- new_column_names
# Assuming your data frame is named ng, you can subset it to get columns from X2000 to X2021:
p <- p[, c("Continent", "Country", paste0(2000:2021))]
# Assuming your data frame is named coal, you can clean up the "Country" column
p <- p %>%
mutate(Country = str_trim(Country, side = "both"))
# Reshape the data as before
reshaped_p <- p %>%
pivot_longer(cols = -c(Continent, Country), names_to = "Year", values_to = "p_consumption") %>%
mutate(Year = as.numeric(Year))
# Omit the "Continent" column
reshaped_p <- reshaped_p %>%
select(-Continent)
reshaped_p <- as.data.frame(reshaped_p)
# Merge the last column of reshaped_p into final_table based on "Country" and "Year"
final_table <- merge(final_table, reshaped_p[, c("Country", "Year", "p_consumption")], by = c("Country", "Year"), all.x = TRUE)
# If you want to fill missing values with 0 in the ng_consumption column, you can use the following line:
final_table$p_consumption[is.na(final_table$p_consumption)] <- 0
final_table <- final_table %>%
mutate(
coal_consumption = ifelse(trimws(coal_consumption) == "NA", 0, as.numeric(coal_consumption)),
ng_consumption = ifelse(trimws(ng_consumption) == "NA", 0, as.numeric(ng_consumption)),
nr_consumption = ifelse(trimws(nr_consumption) == "NA", 0, as.numeric(nr_consumption)),
p_consumption = ifelse(trimws(p_consumption) == "NA", 0, as.numeric(p_consumption))
)
final_table$total_consumption <- rowSums(final_table[, c("coal_consumption", "ng_consumption", "nr_consumption", "p_consumption")])
